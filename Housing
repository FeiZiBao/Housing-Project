--DATA CLEANING

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

--Standardized Date Formating

SELECT SaleDate, CONVERT(Date,SaleDate)
FROM PortfolioProject.dbo.NashvilleHousing

UPDATE NashvilleHousing
SET SaleDate = CONVERT(Date,SaleDate)

SELECT SaleDateConverted, CONVERT(Date,SaleDate)
FROM PortfolioProject.dbo.NashvilleHousing

ALTER TABLE NashvilleHousing
Add SaleDateConverted Date;

UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT(Date,SaleDate)

--Populate Property Address Data

SELECT  *
FROM PortfolioProject.dbo.NashvilleHousing
--WHERE PropertyAddress is null
order by ParcelID

SELECT  og.ParcelID, og.PropertyAddress, n.ParcelID, n.PropertyAddress, ISNULL(og.PropertyAddress,n.PropertyAddress)
FROM PortfolioProject.dbo.NashvilleHousing og
JOIN PortfolioProject.dbo.NashvilleHousing n
	on og.ParcelID = n.ParcelID
	AND og.[UniqueID ] <> n.[UniqueID ]
WHERE og.PropertyAddress is null

Update og
SET PropertyAddress = ISNULL(og.PropertyAddress,n.PropertyAddress)
FROM PortfolioProject.dbo.NashvilleHousing og
JOIN PortfolioProject.dbo.NashvilleHousing n
	on og.ParcelID = n.ParcelID
	AND og.[UniqueID ] <> n.[UniqueID ]
WHERE og.PropertyAddress is null

--Break Down Address Into Individual Columns (Address, City, State)

SELECT  PropertyAddress
FROM PortfolioProject.dbo.NashvilleHousing

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1 )AS Address,
SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress)+1, LEN(propertyaddress)) AS City
FROM PortfolioProject.dbo.NashvilleHousing


ALTER TABLE NashvilleHousing
ADD PropertySplitAddress Nvarchar(255);

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1 )

ALTER TABLE NashvilleHousing
Add PropertySplitCity varchar(255);

UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress)+1, LEN(propertyaddress))

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

--Opstion 2 using PARSENAME

SELECT owneraddress
FROM PortfolioProject.dbo.NashvilleHousing

SELECT
PARSENAME(REPLACE(owneraddress,',','.'), 3),
PARSENAME(REPLACE(owneraddress,',','.'), 2),
PARSENAME(REPLACE(owneraddress,',','.'), 1)
FROM PortfolioProject.dbo.NashvilleHousing

ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress Nvarchar(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(owneraddress,',','.'), 3)

ALTER TABLE NashvilleHousing
Add OwnerSplitCity varchar(255);

UPDATE NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(owneraddress,',','.'), 2)

ALTER TABLE NashvilleHousing
Add OwnerSplitState varchar(255);

UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(owneraddress,',','.'), 1)

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

--Change Y and N to Yes and No in "Sold as Vacant" Field

SELECT DISTINCT (soldasvacant), count(soldasvacant)
FROM PortfolioProject.dbo.NashvilleHousing
GROUP BY SoldAsVacant
order by 2

SELECT SoldAsVacant,
CASE When SoldAsVacant = 'Y' THEN 'YES'
	When SoldAsVacant = 'N' THEN 'NO'
	ELSE SoldAsVacant
	END
FROM PortfolioProject.dbo.NashvilleHousing

UPDATE NashvilleHousing
SET SoldAsVacant =
CASE When SoldAsVacant = 'Y' THEN 'YES'
	When SoldAsVacant = 'N' THEN 'NO'
	ELSE SoldAsVacant
	END

--Removing Duplicates

WITH RowNumCTE AS(
SELECT *,
	ROW_NUMBER() OVER(
	PARTITION BY ParcelID,
				Propertyaddress,
				SalePrice,
				SaleDate,
				LegalReference
				ORDER BY
				UniqueID
				) row_num

FROM PortfolioProject.dbo.NashvilleHousing
--ORDER BY ParcelID
)
SELECT * FROM RowNumCTE
WHERE row_num > 1
ORDER by Propertyaddress

--Delete Unused Columns

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
DROP Column saledate


--Renaming Columns
USE PortfolioProject
